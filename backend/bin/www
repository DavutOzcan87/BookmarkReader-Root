#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sample:server');
var http = require('http');
const db = require('../db/db');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

console.log("env.MONGO_IP" , process.env.MONGO_IP);
var dataBaseIp = assertEnvNotEmpty(process.env.MONGO_IP,"MONGO_IP");
let userName = assertEnvNotEmpty(process.env.MONGO_USER,"MONGO_USER");
let password= assertEnvNotEmpty(process.env.MONGO_PASSWORD,"MONGO_PASSWORD");

let encodedName =  encodeURIComponent(userName);
let encodedPass = encodeURIComponent(password);

const url = `mongodb://${encodedName}:${encodedPass}@${dataBaseIp}:27017`;

db.connect(url,"usersdb-prod" , (err,client)=>{
    if(err)
    {
      console.error("DB Connection failed");
      console.error(err);
      throw "Cannot connect database";
    }
});

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function assertEnvNotEmpty(envArg , envName){
  if(!envArg){
    throw `Environment ${envName} not set`;
  }else
    return envArg;
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
